for (f in 1:nrow(formations)){
if (formations$max_age[f] - formations$min_age[f] > # If formation range is less than the mean formation range
mean(formations$max_age - formations$min_age)) {
if (draw_by == "Lat"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$Mean_Lat[f], formations$max_age[f], formations$Mean_Lat[f]))
}
if (draw_by == "Max_Age"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$max_age[f], formations$max_age[f], formations$max_age[f]))
}
if (draw_by == "Number"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$forbinning[f], formations$max_age[f], formations$forbinning[f]))
}
}
else{
if(draw_by == "Lat"){
fp1 <- rbind(fp1, c(formations$min_age[f], formations$Mean_Lat[f], formations$max_age[f], formations$Mean_Lat[f]))
}
if(draw_by == "Max_Age"){
fp1 <- rbind(fp1, c(formations$min_age[f], formations$max_age[f], formations$max_age[f], formations$max_age[f]))
}
if(draw_by == "Number")
fp1 <- rbind(fp1, c(formations$min_age[f], formations$forbinning[f], formations$max_age[f], formations$forbinning[f]))
}
}
names <- c("x1", "y1", "x2", "y2")
colnames(fp1) <- names
colnames(fplong) <- names
fp <- rbind(fp1, fplong)
par(mar = c(4.1, 4.1, 1, 2.1))
if (draw_by == "Lat"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=75:81,  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations by mean occurrence latitude")
}
if (draw_by == "Lat"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=75:81,  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations by Maximum Age")
}
if (draw_by == "Number"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=75:81,  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations (Number order)")
}
if (score_grid_2 == TRUE){
segments(fplong$x1, fplong$y1, fplong$x2, fplong$y2, lwd = 2, col = "grey") # Plots formations as lines showing their duration
segments(fp1$x1, fp1$y1, fp1$x2, fp1$y2, lwd = 2)
}
else{
segments(fp$x1, fp$y1, fp$x2, fp$y2, lwd = 2)
}
for(n in 1:length(form_bins)){ # draws new bins as coloured boxes for comparison to traditional bins
if(((n %% 2) == 0) == TRUE) next
else {
if(n == length(form_bins)){
if(nrow(binlist) %% 2 == 0){
next
}
else{
rect(useful_bins[n], 0, useful_bins[n-1],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
else{
rect(form_bins[n], 0, form_bins[n+1],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
}
}
FormationGraph(formations, form_bins, stages, score_grid_2 = TRUE, draw_by = "Max_Age") # Visualises the range of formations in comparison with stage level bins and new bins.
FormationGraph(formations, form_bins, stages, score_grid_2 = TRUE, draw_by = "Max_Age") # Visualises the range of formations in comparison with stage level bins and new bins.
# Shows what formations look like through time in comparison to Stages and new Bins.
# Requires formations, form_bins from newBins function and stages from DivDyn package
FormationGraph <- function(formations, form_bins, stages, score_grid_2 = FALSE, draw_by = "Lat"){ # Requires formations, form_bins from newBins function and stages from DivDyn package
TYPE <- c("Lat", "Max_Age", "Number")
if (is.na(pmatch(draw_by, TYPE))){
stop("Invalid method. Choose either 'Lat', 'Max_Age', or 'Number'.")
}
fp1 <- data.frame(matrix(ncol = 4, nrow = 0))
fplong <- data.frame(matrix(ncol = 4, nrow = 0))
for (f in 1:nrow(formations)){
if (formations$max_age[f] - formations$min_age[f] > # If formation range is less than the mean formation range
mean(formations$max_age - formations$min_age)) {
if (draw_by == "Lat"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$Mean_Lat[f], formations$max_age[f], formations$Mean_Lat[f]))
}
if (draw_by == "Max_Age"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$max_age[f], formations$max_age[f], formations$max_age[f]))
}
if (draw_by == "Number"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$forbinning[f], formations$max_age[f], formations$forbinning[f]))
}
}
else{
if(draw_by == "Lat"){
fp1 <- rbind(fp1, c(formations$min_age[f], formations$Mean_Lat[f], formations$max_age[f], formations$Mean_Lat[f]))
}
if(draw_by == "Max_Age"){
fp1 <- rbind(fp1, c(formations$min_age[f], formations$max_age[f], formations$max_age[f], formations$max_age[f]))
}
if(draw_by == "Number")
fp1 <- rbind(fp1, c(formations$min_age[f], formations$forbinning[f], formations$max_age[f], formations$forbinning[f]))
}
}
names <- c("x1", "y1", "x2", "y2")
colnames(fp1) <- names
colnames(fplong) <- names
fp <- rbind(fp1, fplong)
par(mar = c(4.1, 4.1, 1, 2.1))
if (draw_by == "Lat"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=75:81,  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations by mean occurrence latitude")
}
if (draw_by == "Max_Age"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=75:81,  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations by Maximum Age")
}
if (draw_by == "Number"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=75:81,  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations (Number order)")
}
if (score_grid_2 == TRUE){
segments(fplong$x1, fplong$y1, fplong$x2, fplong$y2, lwd = 2, col = "grey") # Plots formations as lines showing their duration
segments(fp1$x1, fp1$y1, fp1$x2, fp1$y2, lwd = 2)
}
else{
segments(fp$x1, fp$y1, fp$x2, fp$y2, lwd = 2)
}
for(n in 1:length(form_bins)){ # draws new bins as coloured boxes for comparison to traditional bins
if(((n %% 2) == 0) == TRUE) next
else {
if(n == length(form_bins)){
if(nrow(binlist) %% 2 == 0){
next
}
else{
rect(useful_bins[n], 0, useful_bins[n-1],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
else{
rect(form_bins[n], 0, form_bins[n+1],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
}
}
FormationGraph(formations, form_bins, stages, score_grid_2 = TRUE, draw_by = "Max_Age") # Visualises the range of formations in comparison with stage level bins and new bins.
# Shows what formations look like through time in comparison to Stages and new Bins.
# Requires formations, form_bins from newBins function and stages from DivDyn package
FormationGraph <- function(formations, form_bins, stages, score_grid_2 = FALSE, draw_by = "Lat"){ # Requires formations, form_bins from newBins function and stages from DivDyn package
TYPE <- c("Lat", "Max_Age", "Number")
if (is.na(pmatch(draw_by, TYPE))){
stop("Invalid method. Choose either 'Lat', 'Max_Age', or 'Number'.")
}
fp1 <- data.frame(matrix(ncol = 4, nrow = 0))
fplong <- data.frame(matrix(ncol = 4, nrow = 0))
for (f in 1:nrow(formations)){
if (formations$max_age[f] - formations$min_age[f] > # If formation range is less than the mean formation range
mean(formations$max_age - formations$min_age)) {
if (draw_by == "Lat"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$Mean_Lat[f], formations$max_age[f], formations$Mean_Lat[f]))
}
if (draw_by == "Max_Age"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$max_age[f], formations$max_age[f], formations$max_age[f]))
}
if (draw_by == "Number"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$forbinning[f], formations$max_age[f], formations$forbinning[f]))
}
}
else{
if(draw_by == "Lat"){
fp1 <- rbind(fp1, c(formations$min_age[f], formations$Mean_Lat[f], formations$max_age[f], formations$Mean_Lat[f]))
}
if(draw_by == "Max_Age"){
fp1 <- rbind(fp1, c(formations$min_age[f], formations$max_age[f], formations$max_age[f], formations$max_age[f]))
}
if(draw_by == "Number")
fp1 <- rbind(fp1, c(formations$min_age[f], formations$forbinning[f], formations$max_age[f], formations$forbinning[f]))
}
}
names <- c("x1", "y1", "x2", "y2")
colnames(fp1) <- names
colnames(fplong) <- names
fp <- rbind(fp1, fplong)
par(mar = c(4.1, 4.1, 1, 2.1))
if (draw_by == "Lat"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=75:81,  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations by mean occurrence latitude")
}
if (draw_by == "Max_Age"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=75:81,  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations by Maximum Age")
}
if (draw_by == "Number"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=75:81,  ylim=rev(range(fp$y1 - 1, fp$y2 + 1)),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations (Number order)")
}
if (score_grid_2 == TRUE){
segments(fplong$x1, fplong$y1, fplong$x2, fplong$y2, lwd = 2, col = "grey") # Plots formations as lines showing their duration
segments(fp1$x1, fp1$y1, fp1$x2, fp1$y2, lwd = 2)
}
else{
segments(fp$x1, fp$y1, fp$x2, fp$y2, lwd = 2)
}
for(n in 1:length(form_bins)){ # draws new bins as coloured boxes for comparison to traditional bins
if(((n %% 2) == 0) == TRUE) next
else {
if(n == length(form_bins)){
if(nrow(binlist) %% 2 == 0){
next
}
else{
rect(useful_bins[n], 0, useful_bins[n-1],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
else{
rect(form_bins[n], 0, form_bins[n+1],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
}
}
FormationGraph(formations, form_bins, stages, score_grid_2 = TRUE, draw_by = "Max_Age") # Visualises the range of formations in comparison with stage level bins and new bins.
rev(range(fp$y1 - 1, fp$y2 + 1))
rev(range(formations$max_age))
# Shows what formations look like through time in comparison to Stages and new Bins.
# Requires formations, form_bins from newBins function and stages from DivDyn package
FormationGraph <- function(formations, form_bins, stages, score_grid_2 = FALSE, draw_by = "Lat"){ # Requires formations, form_bins from newBins function and stages from DivDyn package
TYPE <- c("Lat", "Max_Age", "Number")
if (is.na(pmatch(draw_by, TYPE))){
stop("Invalid method. Choose either 'Lat', 'Max_Age', or 'Number'.")
}
fp1 <- data.frame(matrix(ncol = 4, nrow = 0))
fplong <- data.frame(matrix(ncol = 4, nrow = 0))
for (f in 1:nrow(formations)){
if (formations$max_age[f] - formations$min_age[f] > # If formation range is less than the mean formation range
mean(formations$max_age - formations$min_age)) {
if (draw_by == "Lat"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$Mean_Lat[f], formations$max_age[f], formations$Mean_Lat[f]))
}
if (draw_by == "Max_Age"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$max_age[f], formations$max_age[f], formations$max_age[f]))
}
if (draw_by == "Number"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$forbinning[f], formations$max_age[f], formations$forbinning[f]))
}
}
else{
if(draw_by == "Lat"){
fp1 <- rbind(fp1, c(formations$min_age[f], formations$Mean_Lat[f], formations$max_age[f], formations$Mean_Lat[f]))
}
if(draw_by == "Max_Age"){
fp1 <- rbind(fp1, c(formations$min_age[f], formations$max_age[f], formations$max_age[f], formations$max_age[f]))
}
if(draw_by == "Number")
fp1 <- rbind(fp1, c(formations$min_age[f], formations$forbinning[f], formations$max_age[f], formations$forbinning[f]))
}
}
names <- c("x1", "y1", "x2", "y2")
colnames(fp1) <- names
colnames(fplong) <- names
fp <- rbind(fp1, fplong)
par(mar = c(4.1, 4.1, 1, 2.1))
if (draw_by == "Lat"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=75:81,  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations by mean occurrence latitude")
}
if (draw_by == "Max_Age"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=75:81,  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations by Maximum Age")
}
if (draw_by == "Number"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=75:81,  ylim=rev(range(fp$y1 - 1, fp$y2 + 1)),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations (Number order)")
}
if (score_grid_2 == TRUE){
segments(fplong$x1, fplong$y1, fplong$x2, fplong$y2, lwd = 2, col = "grey") # Plots formations as lines showing their duration
segments(fp1$x1, fp1$y1, fp1$x2, fp1$y2, lwd = 2)
}
else{
segments(fp$x1, fp$y1, fp$x2, fp$y2, lwd = 2)
}
for(n in 1:length(form_bins)){ # draws new bins as coloured boxes for comparison to traditional bins
if(((n %% 2) == 0) == TRUE) next
else {
if(n == length(form_bins)){
if(nrow(binlist) %% 2 == 0){
next
}
else{
rect(useful_bins[n], 0, useful_bins[n-1],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
else{
rect(form_bins[n], 0, form_bins[n+1],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
}
}
FormationGraph(formations, form_bins, stages, score_grid_2 = TRUE, draw_by = "Max_Age") # Visualises the range of formations in comparison with stage level bins and new bins.
FormationGraph(formations, form_bins, stages, score_grid_2 = TRUE, draw_by = "Lat") # Visualises the range of formations in comparison with stage level bins and new bins.
bin_limits <- c(2, max(formations$max_age), 66) # Set user defined bin size
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals). Choose either Score_Grid_1 or 2 (find out more in Functions File)
form_bins
length(form_bins)
round(form_bins)
?round
round(form_bins, digits = 3)
round(form_bins, digits = 2)
round(form_bins, digits = 1)
bin_limits <- c(3, max(formations$max_age), 66) # Set user defined bin size
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals). Choose either Score_Grid_1 or 2 (find out more in Functions File)
form_bins
length(form_bins)
bin_limits <- c(5, max(formations$max_age), 66) # Set user defined bin size
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals). Choose either Score_Grid_1 or 2 (find out more in Functions File)
bin_limits <- c(2, max(formations$max_age), 66) # Set user defined bin size
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals). Choose either Score_Grid_1 or 2 (find out more in Functions File)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
form_bins
length(form_bins)
round(form_bins, digits = 1)
bin_limits <- c(3, max(formations$max_age), 66) # Set user defined bin size
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals). Choose either Score_Grid_1 or 2 (find out more in Functions File)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
form_bins
length(form_bins)
round(form_bins, digits = 1)
bin_limits <- c(4, max(formations$max_age), 66) # Set user defined bin size
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals). Choose either Score_Grid_1 or 2 (find out more in Functions File)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
round(form_bins, digits = 1)
length(form_bins)
stages
View(stages)
stages$bottom[65:82]
stages$bottom[75:82]
length(stages$bottom[75:82])
rev(stages$bottom[75:82])
bin_limits <- c(2, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
round(form_bins, digits = 1)
bin_limits <- c(3, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
round(form_bins, digits = 1)
bin_limits <- c(4, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
round(form_bins, digits = 1)
bin_limits <- c(2, max(formations$max_age), 66) # Set user defined bin size
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals). Choose either Score_Grid_1 or 2 (find out more in Functions File)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
FormationGraph(formations, form_bins, stages, score_grid_2 = TRUE, draw_by = "Lat") # Visualises the range of formations in comparison with stage level bins and new bins.
FormationGraph(formations, form_bins, stages, score_grid_2 = FALSE, draw_by = "Lat") # Visualises the range of formations in comparison with stage level bins and new bins.
bin_limits <- c(3, max(formations$max_age), 66) # Set user defined bin size
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals). Choose either Score_Grid_1 or 2 (find out more in Functions File)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
FormationGraph(formations, form_bins, stages, score_grid_2 = FALSE, draw_by = "Lat") # Visualises the range of formations in comparison with stage level bins and new bins.
bin_limits <- c(4, max(formations$max_age), 66) # Set user defined bin size
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals). Choose either Score_Grid_1 or 2 (find out more in Functions File)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
FormationGraph(formations, form_bins, stages, score_grid_2 = FALSE, draw_by = "Lat") # Visualises the range of formations in comparison with stage level bins and new bins.
bin_limits <- c(2, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
FormationGraph(formations, form_bins, stages, score_grid_2 = TRUE, draw_by = "Lat") # Visualises the range of formations in comparison with stage level bins and new bins.
bin_limits <- c(3, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
FormationGraph(formations, form_bins, stages, score_grid_2 = TRUE, draw_by = "Lat") # Visualises the range of formations in comparison with stage level bins and new bins.
bin_limits <- c(4, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
FormationGraph(formations, form_bins, stages, score_grid_2 = TRUE, draw_by = "Lat") # Visualises the range of formations in comparison with stage level bins and new bins.
bin_limits <- c(4, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
FormationGraph(formations, form_bins, stages, score_grid_2 = TRUE, draw_by = "Lat") # Visualises the range of formations in comparison with stage level bins and new bins.
overlap_counter(score_grid)
formations
View(formations)
# Set working directory
setwd("C:/Users/deancd/Documents/RESEARCH/PROJECTS/FRM_BIN/Formation_Binner/Formation_Binner/") # Set your working directory
# Load in Functions
source("0_Functions_Form_Binner.R") # Import functions from other R file (must be in same working directory)
# Data input
formations <- read.csv (file = "Data/Formations_test2.csv")  #Read in formations
occs <- read.csv(file = "Data/NADINOS-occs-edit.csv") # Read in occurrences
# Standard Bin setup
data(stages)
# Make parts Numeric
formations$max_age <- as.numeric(as.character(formations$max_age)) # Make Numeric
formations$min_age <- as.numeric(as.character(formations$min_age)) # Make Numeric
# Select appropriate formations and order
formations <- formations[which(formations$Location=='WI'),] # Only formations from Western Interior
myformations <- sort(as.vector(formations$Formation)) # Organise
# Select appropriate occurrences
testoccs <- occs[occs$formation %in% myformations,] # Only include occurrences from formation list
testoccs <- droplevels.data.frame(testoccs) # Remove old levels
# Create Formation/occurrences list
Form_list <- split(testoccs, testoccs$formation) # Makes inputted occ data into lists from Formations
# Reorganise formations
formations <- formations[order(formations$Formation),] # Reorganise formations
formations$forbinning <- 1:nrow(formations) # Number formations for easy plotting later
# Add mean occurrence latitude
formations <- occs %>%
rename(Formation = formation) %>%
group_by(Formation) %>%
dplyr::summarize(Mean_Lat = mean(latdec, na.rm = TRUE)) %>%
inner_join(formations, by = "Formation")
#===== Set up =====
Quorum <- c(0.4, 0.6, 0.8)
bin_limits <- c(2, max(formations$max_age), 66) # Set user defined bin size
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals). Choose either Score_Grid_1 or 2 (find out more in Functions File)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
binlist
binlist$bottom - binlist$top
binlist$top - binlist$bottom
mean(binlist$top - binlist$bottom)
stages
stages[74:81]
stages[74:81,]
stages[75:81,]
stages$bottom[75:81,]
stages$bottom[75:81]
mean(stages$bottom[75:81]-stages$top[75:81]0
mean(stages$bottom[75:81]-stages$top[75:81])
bin_limits <- c(3, max(formations$max_age), 66) # Set user defined bin size
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals). Choose either Score_Grid_1 or 2 (find out more in Functions File)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
mean(binlist$top - binlist$bottom)
bin_limits <- c(4, max(formations$max_age), 66) # Set user defined bin size
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals). Choose either Score_Grid_1 or 2 (find out more in Functions File)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
mean(binlist$top - binlist$bottom)
bin_limits <- c(2, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
mean(binlist$top - binlist$bottom)
bin_limits <- c(3, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
mean(binlist$top - binlist$bottom)
bin_limits <- c(4, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
mean(binlist$top - binlist$bottom)
bin_limits <- c(2, max(formations$max_age), 66) # Set user defined bin size
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals). Choose either Score_Grid_1 or 2 (find out more in Functions File)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
sd(binlist$top - binlist$bottom)
bin_limits <- c(3, max(formations$max_age), 66) # Set user defined bin size
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals). Choose either Score_Grid_1 or 2 (find out more in Functions File)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
sd(binlist$top - binlist$bottom)
bin_limits <- c(4, max(formations$max_age), 66) # Set user defined bin size
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
sd(binlist$top - binlist$bottom)#
bin_limits <- c(2, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
sd(binlist$top - binlist$bottom)#
bin_limits <- c(3, max(formations$max_age), 66) # Set user defined bin size
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
bin_limits <- c(3, max(formations$max_age), 66) # Set user defined bin size
sd(binlist$top - binlist$bottom)#
bin_limits <- c(4, max(formations$max_age), 66) # Set user defined bin size
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
sd(binlist$top - binlist$bottom)#
sd(stages$bottom[75:81]-stages$top[75:81]0
sd(stages$bottom[75:81]-stages$top[75:81])
