}
}
FormBin_M1 <- function(formations, binlist, Form_list, Quorum) {
sqsmst <- list()
for (q in 1:length(Quorum)){
M1_List <- list()# make an empty list of the occurrences in each bin
# Code for assigning formations and associated occurrences to bins
for(b in 1:nrow(binlist)){ # for each new bin
temp_recs <- data.frame()
for (f in 1:nrow(formations)){
if (formations$max_age[f] >= binlist[b,2] && formations$min_age[f] <= binlist[b,3]){ # If Formation max. age is greater than Bin min. age AND if Formation min. age is less then Bin max. age (i.e. falls within bin at some point)
temp_recs <- rbind(temp_recs, Form_list[[f]]) # Add occurrences from that formation to occurrence list
}
}
if (nrow(temp_recs) > 0){
temp_recs$bin_no <- b
}
M1_List[[b]] <- temp_recs
}
df <- do.call("rbind", M1_List)
# Code for subsampling
niter <- 100 # number of SQS iterations
SQS <- subsample(df,iter=100, q=Quorum[q],tax="occurrence.genus_name", bin="bin_no",
coll = 'collection_no', output="dist", type="sqs",
duplicates = TRUE, useFailed = TRUE)
#calculate Mean, SD and 95% confidence intervals for SQS data
sqsaverage <- rowMeans2(SQS$divSIB, na.rm = TRUE)
sqssd <- rowSds(SQS$divSIB, na.rm = TRUE)
sqsminsd <- sqsaverage - sqssd
sqsmaxsd <- sqsaverage + sqssd
#bind data
combined.sqs <- cbind(sqsaverage, sqssd, sqsminsd, sqsmaxsd)
rownames(combined.sqs) <- binlist$bin
combined.sqs <- as.data.frame(combined.sqs)
temp_name <- paste("q.",deparse(Quorum[q]),"_", "SQS_Results", sep = "") #Name files based on data entered to function
assign(temp_name, combined.sqs, envir = .GlobalEnv)
sqsmst[[q]] <- combined.sqs
names(sqsmst)[[q]] <- deparse(Quorum[q])
}
sqsmst <<- sqsmst
#Binstats
bin_info <- binstat(df, tax="occurrence.genus_name", bin="bin_no",
coll = 'collection_no')
bin_info[bin_info==0] <- NA
bin_info <<- bin_info
# Recording Results
dir.create(paste0("Results"), showWarnings = FALSE) #stops warnings if folder already exists
write.csv(bin_info, file.path(paste("Results/M1_Bin_info.csv", sep="")))
for (q in 1:length(Quorum)){
temp_name <- paste("M1_SQS_", Quorum[q], sep = "")
write.csv(sqsmst[q], file.path(paste("Results/", temp_name, ".csv", sep="")))
}
# Plotting Raw Div and Sampling Proxies
#layout(matrix(1:2, ncol = 1), widths = 1, heights = c(2,2), respect = FALSE)
#par(mar = c(0, 4.1, 4.1, 2.1))
#with(binlist, tsplot(stages, ylab = "Raw Diversity",
#            xlim=1:nrow(stages),  ylim=c(0,(max(bin_info$SIBs, na.rm = TRUE)+(max(bin_info$SIBs, na.rm = TRUE)*0.1))),
#            shading=NULL, plot.args=list(xaxt = 'n')))
#useful_bins <- c(binlist$bottom, binlist$top[nrow(binlist)])
#for(n in 1:length(useful_bins)){
#  if(((n %% 2) == 0) == TRUE) next
#  else {
#    if(n == length(useful_bins)){
#      if(nrow(binlist) %% 2 == 0){
#        next
#      }
#      else{
#        rect(useful_bins[n], 0, useful_bins[n-1],
#        (max(bin_info$SIBs, na.rm = TRUE)+(max(bin_info$SIBs, na.rm = TRUE)*0.1)),
#        col = "#32323232", border = NA)
#      }
#    }
#    else{
#      rect(useful_bins[n], 0, useful_bins[n+1],
#      (max(bin_info$SIBs, na.rm = TRUE)+(max(bin_info$SIBs, na.rm = TRUE)*0.1)),
#      col = "#32323232", border = NA)
#    }
#  }
#}
#lines(binlist$mid, bin_info$SIBs, type = "o", pch = 21, col = "black", bg = "grey", lwd = 1)
#par(mar = c(4.1, 4.1, 0, 2.1))
par(mfrow=c(1,1), mar = c(4.1, 4.1, 1, 2.1))
plotMaker(bin_info$SIBs, binlist, "Raw Diversity")
plotMaker(bin_info$colls, binlist, "Number of Collections")
plotMaker(bin_info$u, binlist, "Good's u")
# Plotting SQS
tsplot(stages, boxes=c("short","system"),
xlim=1:nrow(stages),  ylim=c(0,(max(sqsmst[length(sqsmst)][[1]][1])+(max(sqsmst[length(sqsmst)][[1]][1])*0.1))),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Subsampled Diversity")
for (q in 1:length(Quorum)){
g.col <- gray.colors(length(Quorum), start = 0.9, end = 0.3, gamma = 2.2, alpha = NULL)
lines(binlist$mid, sqsmst[[q]]$sqsaverage, type = 'o', col = g.col[q],
pch = 21, bg = "grey")
polygon(x = c(binlist$mid, rev(binlist$mid)),
y = c(sqsmst[[q]]$sqsmaxsd, rev(sqsmst[[q]]$sqsminsd)),
col =  adjustcolor(g.col[q], alpha.f = 0.40), border = NA)
}
for(n in 1:length(form_bins)){
if(((n %% 2) == 0) == TRUE) next
else {
if(n == length(form_bins)){
if(nrow(binlist) %% 2 == 0){
next
}
else{
rect(useful_bins[n], 0, useful_bins[n-1],
(max(sqsmst[length(sqsmst)][[1]][1], na.rm = TRUE)+(max(sqsmst[length(sqsmst)][[1]][1], na.rm = TRUE)*0.1)),
col = "#32323232", border = NA)
}
}
else{
rect(form_bins[n], 0, form_bins[n+1],
(max(sqsmst[length(sqsmst)][[1]][1], na.rm = TRUE)+(max(sqsmst[length(sqsmst)][[1]][1], na.rm = TRUE)*0.1)),
col = "#32323232", border = NA)
}
}
}
}
FormationGraph(formations, form_bins, stages, score_grid_2 = FALSE, draw_by = "Lat", Col = "Occurrences", legend = TRUE, STAGE = TRUE)
# Set working directory
setwd("C:/Users/deancd/Documents/RESEARCH/PROJECTS/FRM_BIN/Formation_Binner/Formation_Binner/") # Set your working directory
# Load in Functions
source("0_Functions_Form_Binner.R") # Import functions from other R file (must be in same working directory)
# Data input
formations <- read.csv (file = "Data/Formations_test2.csv")  #Read in formations
occs <- read.csv(file = "Data/NADINOS-occs-edit.csv") # Read in occurrences
# Standard Bin setup - trim to fit relevant time frame.
data(stages)
stages <- stages[75:81,] # Set stages to range from Albian to Maastrichtian
# Make parts Numeric
formations$max_age <- as.numeric(as.character(formations$max_age)) # Make Numeric
formations$min_age <- as.numeric(as.character(formations$min_age)) # Make Numeric
# Select appropriate formations and order
formations <- formations[which(formations$Location=='WI'),] # Only formations from Western Interior
# Select appropriate occurrences
testoccs <- occs[occs$formation %in% myformations,] # Only include occurrences from formation list
testoccs <- droplevels.data.frame(testoccs) # Remove old levels
myformations <- sort(as.vector(formations$Formation)) # Organise
# Create Formation/occurrences list
Form_list <- split(testoccs, testoccs$formation) # Makes inputted occ data into lists from Formations
# Reorganise formations
formations <- formations[order(formations$Formation),] # Reorganise formations
formations$forbinning <- 1:nrow(formations) # Number formations for easy plotting later
# Add mean occurrence latitude and raw diversity per formation
formations <- occs %>%
rename(Formation = formation) %>%
group_by(Formation) %>%
dplyr::summarize(Mean_Lat = mean(latdec, na.rm = TRUE),
Diversity = n_distinct(occurrence.genus_name),
Occurrences = n()) %>%
inner_join(formations, by = "Formation")
# Set working directory
setwd("C:/Users/deancd/Documents/RESEARCH/PROJECTS/FRM_BIN/Formation_Binner/Formation_Binner/") # Set your working directory
# Load in Functions
source("0_Functions_Form_Binner.R") # Import functions from other R file (must be in same working directory)
# Data input
formations <- read.csv (file = "Data/Formations_test2.csv")  #Read in formations
occs <- read.csv(file = "Data/NADINOS-occs-edit.csv") # Read in occurrences
# Standard Bin setup - trim to fit relevant time frame.
data(stages)
stages <- stages[75:81,] # Set stages to range from Albian to Maastrichtian
# Make parts Numeric
formations$max_age <- as.numeric(as.character(formations$max_age)) # Make Numeric
formations$min_age <- as.numeric(as.character(formations$min_age)) # Make Numeric
# Select appropriate formations and order
formations <- formations[which(formations$Location=='WI'),] # Only formations from Western Interior
myformations <- sort(as.vector(formations$Formation)) # Organise
# Select appropriate occurrences
testoccs <- occs[occs$formation %in% myformations,] # Only include occurrences from formation list
testoccs <- droplevels.data.frame(testoccs) # Remove old levels
# Create Formation/occurrences list
Form_list <- split(testoccs, testoccs$formation) # Makes inputted occ data into lists from Formations
# Reorganise formations
formations <- formations[order(formations$Formation),] # Reorganise formations
formations$forbinning <- 1:nrow(formations) # Number formations for easy plotting later
# Add mean occurrence latitude and raw diversity per formation
formations <- occs %>%
rename(Formation = formation) %>%
group_by(Formation) %>%
dplyr::summarize(Mean_Lat = mean(latdec, na.rm = TRUE),
Diversity = n_distinct(occurrence.genus_name),
Occurrences = n()) %>%
inner_join(formations, by = "Formation")
#===== Set up =====
Quorum <- c(0.4, 0.6, 0.8)
bin_limits <- c(2, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE) # Uses the scoring grid to generate new bins.
FormationGraph(formations, form_bins, stages, score_grid_2 = FALSE, draw_by = "Lat", Col = "Occurrences", legend = TRUE, STAGE = TRUE)
# Shows what formations look like through time in comparison to Stages and new Bins.
# Requires formations, form_bins from newBins function and stages from DivDyn package
FormationGraph <- function(formations, form_bins, stages, score_grid_2 = FALSE, draw_by = "Lat", Col = "None", legend = TRUE, STAGE = FALSE){ # Requires formations, form_bins from newBins function and stages from DivDyn package
TYPE <- c("Lat", "Max_Age", "Number")
if (is.na(pmatch(draw_by, TYPE))){
stop("Invalid drawing method. Choose either 'Lat', 'Max_Age', or 'Number'.")
}
TYPE <- c("None", "Diversity", "Occurrences")
if (is.na(pmatch(Col, TYPE))){
stop("Invalid colouring method. Choose either 'None', 'Diversity', or 'Occurrences'.")
}
fp1 <- data.frame(matrix(ncol = 5, nrow = 0))
fplong <- data.frame(matrix(ncol = 5, nrow = 0))
for (f in 1:nrow(formations)){
if (formations$max_age[f] - formations$min_age[f] > # If formation range is less than the mean formation range
mean(formations$max_age - formations$min_age)) {
if (draw_by == "Lat"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$Mean_Lat[f], formations$max_age[f], formations$Mean_Lat[f], formations$Diversity[f], formations$Occurrences[f]))
}
if (draw_by == "Max_Age"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$max_age[f], formations$max_age[f], formations$max_age[f], formations$Diversity[f], formations$Occurrences[f]))
}
if (draw_by == "Number"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$forbinning[f], formations$max_age[f], formations$forbinning[f], formations$Diversity[f], formations$Occurrences[f]))
}
}
else{
if(draw_by == "Lat"){
fp1 <- rbind(fp1, c(formations$min_age[f], formations$Mean_Lat[f], formations$max_age[f], formations$Mean_Lat[f], formations$Diversity[f], formations$Occurrences[f]))
}
if(draw_by == "Max_Age"){
fp1 <- rbind(fp1, c(formations$min_age[f], formations$max_age[f], formations$max_age[f], formations$max_age[f], formations$Diversity[f], formations$Occurrences[f]))
}
if(draw_by == "Number")
fp1 <- rbind(fp1, c(formations$min_age[f], formations$forbinning[f], formations$max_age[f], formations$forbinning[f], formations$Diversity[f], formations$Occurrences[f]))
}
}
names <- c("x1", "y1", "x2", "y2", "Diversity", "Occurrences")
colnames(fp1) <- names
colnames(fplong) <- names
fp <- rbind(fp1, fplong)
layout(matrix(1:1,nrow=1), widths=c(1,1), height = c(1,1))
if(Col == "Diversity"){
cols <- brewer.pal(5, "Reds")
colramp <- colorRampPalette(cols)
fp$Col <- colramp(5)[as.numeric(cut(fp$Diversity,breaks = 5))]
if (legend == TRUE){
layout(matrix(1:2,nrow=1), widths=c(0.85,0.15), heights = c(1,1))
}
}
if(Col == "Occurrences"){
cols <- brewer.pal(5, "Reds")
colramp <- colorRampPalette(cols)
fp$Col <- colramp(5)[as.numeric(cut(fp$Occurrences,breaks = 5))]
if (legend == TRUE){
layout(matrix(1:2,nrow=1), widths=c(0.85,0.15), heights = c(1,1))
}
}
par(mar = c(4.1, 4.1, 1, 1))
if (draw_by == "Lat"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=1:nrow(stages),  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations by mean occurrence latitude")
}
if (draw_by == "Max_Age"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=1:nrow(stages),  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations by Maximum Age")
}
if (draw_by == "Number"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=1:nrow(stages),  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations (Number order)")
}
if(STAGE == TRUE){
for(n in 1:nrow(stages)){ # draws new bins as coloured boxes for comparison to traditional bins
if(((n %% 2) == 0) == TRUE) next
else {
if(n == 7){
if(nrow(binlist) %% 2 == 0){
next
}
else{
rect(stages$top[max(nrow(stages))], 0, stages$bottom[max(nrow(stages))],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
else{
rect(stages$top[n], 0, stages$bottom[n],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
}
}
else{
for(n in 1:length(form_bins)){ # draws new bins as coloured boxes for comparison to traditional bins
if(((n %% 2) == 0) == TRUE) next
else {
if(n == length(form_bins)){
if(nrow(binlist) %% 2 == 0){
next
}
else{
rect(useful_bins[n], 0, useful_bins[n-1],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
else{
rect(form_bins[n], 0, form_bins[n+1],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
}
}
if (score_grid_2 == TRUE){
segments(fplong$x1, fplong$y1, fplong$x2, fplong$y2, lwd = 2, col = "grey") # Plots formations as lines showing their duration
if (Col == "Diversity" | Col == "Occurrences"){
segments(fp1$x1, fp1$y1, fp1$x2, fp1$y2, lwd = 2, col = fp$Col)
}
else{
segments(fp1$x1, fp1$y1, fp1$x2, fp1$y2, lwd = 2)
}
}
else{
if (Col == "Diversity" | Col == "Occurrences"){
segments(fp$x1, fp$y1, fp$x2, fp$y2, lwd = 2, col = fp$Col)
}
else{
segments(fp$x1, fp$y1, fp$x2, fp$y2, lwd = 2)
}
}
if (Col == "Diversity" && legend == TRUE){
par(mar = c(4.1, 0.5, 1, 0))
legend_image <- as.raster(matrix(rev(colramp(5)), ncol=1))
plot(c(0,4),c(0,1),type = 'n', axes = F, xlab = '', ylab = '')
title("Diversity", cex.main = 0.9, line = -5, adj = 0)
text(x=1.1, y = seq(0.25,0.75,l=5), cex = 0.9, labels = round(seq(0,max(fp$Diversity),l=5)))
rasterImage(legend_image, 0, 0.25, 0.5, 0.75)
}
if (Col == "Occurrences" && legend == TRUE){
par(mar = c(4.1, 0.5, 1, 0))
legend_image <- as.raster(matrix(rev(colramp(5)), ncol=1))
plot(c(0,4),c(0,1),type = 'n', axes = F, xlab = '', ylab = '')
title("Occurrences", cex.main = 0.9, line = -5, adj = 0)
text(x=1.1, y = seq(0.25,0.75,l=5), cex = 0.9, labels = round(seq(0,max(fp$Diversity),l=5)))
rasterImage(legend_image, 0, 0.25, 0.5, 0.75)
}
}
FormationGraph(formations, form_bins, stages, score_grid_2 = FALSE, draw_by = "Lat", Col = "Occurrences", legend = TRUE, STAGE = TRUE)
# Shows what formations look like through time in comparison to Stages and new Bins.
# Requires formations, form_bins from newBins function and stages from DivDyn package
FormationGraph <- function(formations, form_bins, stages, score_grid_2 = FALSE, draw_by = "Lat", Col = "None", legend = TRUE, STAGE = FALSE){ # Requires formations, form_bins from newBins function and stages from DivDyn package
TYPE <- c("Lat", "Max_Age", "Number")
if (is.na(pmatch(draw_by, TYPE))){
stop("Invalid drawing method. Choose either 'Lat', 'Max_Age', or 'Number'.")
}
TYPE <- c("None", "Diversity", "Occurrences")
if (is.na(pmatch(Col, TYPE))){
stop("Invalid colouring method. Choose either 'None', 'Diversity', or 'Occurrences'.")
}
fp1 <- data.frame(matrix(ncol = 5, nrow = 0))
fplong <- data.frame(matrix(ncol = 5, nrow = 0))
for (f in 1:nrow(formations)){
if (formations$max_age[f] - formations$min_age[f] > # If formation range is less than the mean formation range
mean(formations$max_age - formations$min_age)) {
if (draw_by == "Lat"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$Mean_Lat[f], formations$max_age[f], formations$Mean_Lat[f], formations$Diversity[f], formations$Occurrences[f]))
}
if (draw_by == "Max_Age"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$max_age[f], formations$max_age[f], formations$max_age[f], formations$Diversity[f], formations$Occurrences[f]))
}
if (draw_by == "Number"){
fplong <- rbind(fplong, c(formations$min_age[f], formations$forbinning[f], formations$max_age[f], formations$forbinning[f], formations$Diversity[f], formations$Occurrences[f]))
}
}
else{
if(draw_by == "Lat"){
fp1 <- rbind(fp1, c(formations$min_age[f], formations$Mean_Lat[f], formations$max_age[f], formations$Mean_Lat[f], formations$Diversity[f], formations$Occurrences[f]))
}
if(draw_by == "Max_Age"){
fp1 <- rbind(fp1, c(formations$min_age[f], formations$max_age[f], formations$max_age[f], formations$max_age[f], formations$Diversity[f], formations$Occurrences[f]))
}
if(draw_by == "Number")
fp1 <- rbind(fp1, c(formations$min_age[f], formations$forbinning[f], formations$max_age[f], formations$forbinning[f], formations$Diversity[f], formations$Occurrences[f]))
}
}
names <- c("x1", "y1", "x2", "y2", "Diversity", "Occurrences")
colnames(fp1) <- names
colnames(fplong) <- names
fp <- rbind(fp1, fplong)
layout(matrix(1:1,nrow=1), widths=c(1,1), height = c(1,1))
if(Col == "Diversity"){
cols <- brewer.pal(5, "Reds")
colramp <- colorRampPalette(cols)
fp$Col <- colramp(5)[as.numeric(cut(fp$Diversity,breaks = 5))]
if (legend == TRUE){
layout(matrix(1:2,nrow=1), widths=c(0.85,0.15), heights = c(1,1))
}
}
if(Col == "Occurrences"){
cols <- brewer.pal(5, "Reds")
colramp <- colorRampPalette(cols)
fp$Col <- colramp(5)[as.numeric(cut(fp$Occurrences,breaks = 5))]
if (legend == TRUE){
layout(matrix(1:2,nrow=1), widths=c(0.85,0.15), heights = c(1,1))
}
}
par(mar = c(4.1, 4.1, 1, 1))
if (draw_by == "Lat"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=1:nrow(stages),  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations by mean occurrence latitude")
}
if (draw_by == "Max_Age"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=1:nrow(stages),  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations by Maximum Age")
}
if (draw_by == "Number"){
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=1:nrow(stages),  ylim=range(fp$y1 - 1, fp$y2 + 1),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations (Number order)")
}
if(STAGE == TRUE){
for(n in 1:nrow(stages)){ # draws new bins as coloured boxes for comparison to traditional bins
if(((n %% 2) == 0) == TRUE) next
else {
if(n == 7){
if(nrow(binlist) %% 2 == 0){
next
}
else{
rect(stages$top[max(nrow(stages))], 0, stages$bottom[max(nrow(stages))],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
else{
rect(stages$top[n], 0, stages$bottom[n],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
}
}
else{
for(n in 1:length(form_bins)){ # draws new bins as coloured boxes for comparison to traditional bins
if(((n %% 2) == 0) == TRUE) next
else {
if(n == length(form_bins)){
if(nrow(binlist) %% 2 == 0){
next
}
else{
rect(useful_bins[n], 0, useful_bins[n-1],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
else{
rect(form_bins[n], 0, form_bins[n+1],
max(fp$y2+1, na.rm = TRUE), col = "#32323232", border = NA)
}
}
}
}
if (score_grid_2 == TRUE){
segments(fplong$x1, fplong$y1, fplong$x2, fplong$y2, lwd = 2, col = "grey") # Plots formations as lines showing their duration
if (Col == "Diversity" | Col == "Occurrences"){
segments(fp1$x1, fp1$y1, fp1$x2, fp1$y2, lwd = 2, col = fp$Col)
}
else{
segments(fp1$x1, fp1$y1, fp1$x2, fp1$y2, lwd = 2)
}
}
else{
if (Col == "Diversity" | Col == "Occurrences"){
segments(fp$x1, fp$y1, fp$x2, fp$y2, lwd = 2, col = fp$Col)
}
else{
segments(fp$x1, fp$y1, fp$x2, fp$y2, lwd = 2)
}
}
if (Col == "Diversity" && legend == TRUE){
par(mar = c(4.1, 0.5, 1, 0))
legend_image <- as.raster(matrix(rev(colramp(5)), ncol=1))
plot(c(0,4),c(0,1),type = 'n', axes = F, xlab = '', ylab = '')
title("Diversity", cex.main = 0.9, line = -5, adj = 0)
text(x=1.1, y = seq(0.25,0.75,l=5), cex = 0.9, labels = round(seq(0,max(fp$Diversity),l=5)))
rasterImage(legend_image, 0, 0.25, 0.5, 0.75)
}
if (Col == "Occurrences" && legend == TRUE){
par(mar = c(4.1, 0.5, 1, 0))
legend_image <- as.raster(matrix(rev(colramp(5)), ncol=1))
plot(c(0,4),c(0,1),type = 'n', axes = F, xlab = '', ylab = '')
title("Occurrences", cex.main = 0.9, line = -5, adj = 0)
text(x=1.1, y = seq(0.25,0.75,l=5), cex = 0.9, labels = round(seq(0,max(fp$Occurrences),l=5)))
rasterImage(legend_image, 0, 0.25, 0.5, 0.75)
}
}
FormationGraph(formations, form_bins, stages, score_grid_2 = FALSE, draw_by = "Lat", Col = "Occurrences", legend = TRUE, STAGE = TRUE)
FormationGraph(formations, form_bins, stages, score_grid_2 = FALSE, draw_by = "Lat", Col = "Occurrences", legend = TRUE, STAGE = FALSE)
FormationGraph(formations, form_bins, stages, score_grid_2 = FALSE, draw_by = "Lat", Col = "Diversity", legend = TRUE, STAGE = FALSE)
FormationGraph(formations, form_bins, stages, score_grid_2 = FALSE, draw_by = "Lat", Col = "Occurrences", legend = TRUE, STAGE = FALSE)
bins <- c(113.1, 110.2, 107.6, 100.5, 98.5, 96.3, 93.9, 92.9, 91.5, 89.8, 88.5, 88.1, 86.3, 86, 84.2, 80.6, 76.3, 72.5, 69.9, 66)
binDframe <- data.frame(bin = c("Lower Albian", "Middle Albian", "Upper Albian",
"Lower Cenomanian", "Middle Cenomanian", "Upper Cenomanian",
"Lower Turonian", "Middle Turonian", "Upper Turonian",
"Lower Coniacian", "Middle Coniacian", "Upper Coniacian",
"Lower Santonian", "Upper Santonian",
"Lower Campanian", "Middle Campanian", "Upper Campanian",
"Lower Maastrichtian", "Upper Maastrichtian"), # Combines bin data to make dataframe of minimum, maximum and mid point of each new bin
FAD = as.numeric(bins[1:(length(bins)-1)]+1),
LAD = as.numeric(bins[2:(length(bins))]))
binDframe
mean(binDframe$FAD, binDframe$LAD)
(binDframe$FAD + binDframe$LAD)/2
mean(binDframe$FAD - binDframe$LAD)
sd(binDframe$FAD - binDframe$LAD)
