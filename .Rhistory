# Set working directory
setwd("C:/Users/deancd/Documents/RESEARCH/PROJECTS/FRM_BIN/Formation_Binner/Formation_Binner/") # Set your working directory
# Load in Functions
source("0_Functions_Form_Binner.R") # Import functions from other R file (must be in same working directory)
# Data input
formations <- read.csv (file = "Data/Formations_test2.csv")  #Read in formations
occs <- read.csv(file = "Data/NADINOS-occs-edit.csv") # Read in occurrences
score_grid<- as.data.frame(score_grid)
bin_size <- bin_limits[1]
# Set working directory
setwd("C:/Users/deancd/Documents/RESEARCH/PROJECTS/FRM_BIN/Formation_Binner/Formation_Binner/") # Set your working directory
# Load in Functions
source("0_Functions_Form_Binner.R") # Import functions from other R file (must be in same working directory)
library(pbmcapply)
library(dplyr)
library(tidyverse)
library(divDyn)
library(matrixStats)
library(beepr)
library(rowr)
# Data input
formations <- read.csv (file = "Data/Formations_test2.csv")  #Read in formations
occs <- read.csv(file = "Data/NADINOS-occs-edit.csv") # Read in occurrences
# Standard Bin setup
data(stages)
# Make parts Numeric
formations$max_age <- as.numeric(as.character(formations$max_age)) # Make Numeric
formations$min_age <- as.numeric(as.character(formations$min_age)) # Make Numeric
# Select appropriate formations and order
formations <- formations[which(formations$Location=='WI'),] # Only formations from Western Interior
myformations <- sort(as.vector(formations$Formation)) # Organise
# Select appropriate occurrences
testoccs <- occs[occs$formation %in% myformations,] # Only include occurrences from formation list
testoccs <- droplevels.data.frame(testoccs) # Remove old levels
# Create Formation/occurrences list
Form_list <- split(testoccs, testoccs$formation) # Makes inputted occ data into lists from Formations
# Reorganise formations
formations <- formations[order(formations$Formation),] # Reorganise formations
formations$forbinning <- 1:nrow(formations) # Number formations for easy plotting later
Quorum <- c(0.4, 0.6, 0.8)
bin_limits <- c(3, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages) # Uses the scoring grid to generate new bins.
FormationGraph(formations, form_bins, stages) # Visualises the range of formations in comparison with stage level bins and new bins.
### Running Methods ###
FormBin_M1(formations, binlist, Form_list, Quorum) # Generates formation binned plots of diversity, sampling proxies and SQS results using an inclusive model
FormBin_M2(formations, binlist, Form_list, Quorum) # Generates formation binned plots of diversity, sampling proxies and SQS results using an exclusive model
FormBin_M3(formations, binlist, Form_list, times = 100, Quorum) # Generates plots of diversity, sampling proxies and SQS results using a representative model.
# Set working directory
setwd("C:/Users/deancd/Documents/RESEARCH/PROJECTS/FRM_BIN/Formation_Binner/Formation_Binner/") # Set your working directory
# Load in Functions
source("0_Functions_Form_Binner.R") # Import functions from other R file (must be in same working directory)
library(pbmcapply)
library(dplyr)
library(tidyverse)
library(divDyn)
library(rowr)
library(beepr)
library(matrixStats)
# Data input
formations <- read.csv (file = "Data/Formations_test2.csv")  #Read in formations
occs <- read.csv(file = "Data/NADINOS-occs-edit.csv") # Read in occurrences
# Standard Bin setup
data(stages)
# Make parts Numeric
formations$max_age <- as.numeric(as.character(formations$max_age)) # Make Numeric
formations$min_age <- as.numeric(as.character(formations$min_age)) # Make Numeric
# Select appropriate formations and order
formations <- formations[which(formations$Location=='WI'),] # Only formations from Western Interior
myformations <- sort(as.vector(formations$Formation)) # Organise
# Select appropriate occurrences
testoccs <- occs[occs$formation %in% myformations,] # Only include occurrences from formation list
testoccs <- droplevels.data.frame(testoccs) # Remove old levels
# Create Formation/occurrences list
Form_list <- split(testoccs, testoccs$formation) # Makes inputted occ data into lists from Formations
# Reorganise formations
formations <- formations[order(formations$Formation),] # Reorganise formations
#===== Set up =====
Quorum <- c(0.4, 0.6, 0.8)
formations$forbinning <- 1:nrow(formations) # Number formations for easy plotting later
bin_limits <- c(3, max(formations$max_age), 66) # Set user defined bin size
# 2 Ma resolution
Scoring_Grid_1(formations)
bin_limits <- c(2, max(formations$max_age), 66)
newBins(score_grid, formations, bin_limits, allbins, stages)
bin_limits <- c(2, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals)
newBins(score_grid, formations, bin_limits, allbins, stages) # Uses the scoring grid to generate new bins.
FormationGraph(formations, form_bins, stages) # Visualises the range of formations in comparison with stage level bins and new bins.
#===== Running diversity Methods =====
FormBin_M1(formations, binlist, Form_list, Quorum) # Generates formation binned plots of diversity, sampling proxies and SQS results using an inclusive model
FormBin_M2(formations, binlist, Form_list, Quorum) # Generates formation binned plots of diversity, sampling proxies and SQS results using an exclusive model
FormBin_M3(formations, binlist, Form_list, times = 100, Quorum) # Generates plots of diversity, sampling proxies and SQS results using a representative model.
#===== Set up =====
Quorum <- c(0.4, 0.6, 0.8)
bin_limits <- c(2, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages) # Uses the scoring grid to generate new bins.
FormationGraph(formations, form_bins, stages) # Visualises the range of formations in comparison with stage level bins and new bins.
#===== Running diversity Methods =====
FormBin_M1(formations, binlist, Form_list, Quorum) # Generates formation binned plots of diversity, sampling proxies and SQS results using an inclusive model
FormBin_M2(formations, binlist, Form_list, Quorum) # Generates formation binned plots of diversity, sampling proxies and SQS results using an exclusive model
FormBin_M3(formations, binlist, Form_list, times = 100, Quorum) # Generates plots of diversity, sampling proxies and SQS results using a representative model.
bin_limits <- c(4, max(formations$max_age), 66) # Set user defined bin size
#===== Bin generation and comparison =====
Scoring_Grid_1(formations) # Generates scoring grid. Currently set to default resolution (0.01 Ma intervals)
newBins(score_grid, formations, bin_limits, allbins, stages) # Uses the scoring grid to generate new bins.
FormationGraph(formations, form_bins, stages) # Visualises the range of formations in comparison with stage level bins and new bins.
#===== Running diversity Methods =====
FormBin_M1(formations, binlist, Form_list, Quorum) # Generates formation binned plots of diversity, sampling proxies and SQS results using an inclusive model
FormBin_M2(formations, binlist, Form_list, Quorum) # Generates formation binned plots of diversity, sampling proxies and SQS results using an exclusive model
FormBin_M3(formations, binlist, Form_list, times = 100, Quorum) # Generates plots of diversity, sampling proxies and SQS results using a representative model.
bin_limits <- c(4, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages) # Uses the scoring grid to generate new bins.
Scoring_Grid_2(formations)
bin_limits <- c(3, max(formations$max_age), 66)
newBins(score_grid, formations, bin_limits, allbins, stages)
FormationGraph(formations, form_bins, stages)
FormBin_M2(formations, binlist, Form_list, Quorum)
bin_limits <- c(2, max(formations$max_age), 66)
newBins(score_grid, formations, bin_limits, allbins, stages)
FormBin_M2(formations, binlist, Form_list, Quorum)
# 4 Ma resolution
Scoring_Grid_1(formations)
Scoring_Grid_2(formations)
bin_limits <- c(4, max(formations$max_age), 66)
newBins(score_grid, formations, bin_limits, allbins, stages)
FormBin_M2(formations, binlist, Form_list, Quorum)
bin_limits <- c(4, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages) # Uses the scoring grid to generate new bins.
FormBin_M3(formations, binlist, Form_list, times = 100, Quorum) # Generates plots of diversity, sampling proxies and SQS results using a representative model.
#===== Running diversity Methods =====
FormBin_M1(formations, binlist, Form_list, Quorum) # Generates formation binned plots of diversity, sampling proxies and SQS results using an inclusive model
FormBin_M2(formations, binlist, Form_list, Quorum) # Generates formation binned plots of diversity, sampling proxies and SQS results using an exclusive model
newBins(score_grid, formations, bin_limits, allbins, stages) # Uses the scoring grid to generate new bins.
FormationGraph(formations, form_bins, stages) # Visualises the range of formations in comparison with stage level bins and new bins.
stages
View(stages)
data(stages)
stages
View(occs)
occs$ma_mid[2]
colnames(stages)
colnames(occs)
colnames(occs)[38]
colnames(occs)[38] <- "new_bin"
colnames(occs)[38]
occs$new_bin[5]
for(s in 1:nrow(stages)){
for(o in 1:nrow(occs)){
if(occs$ma_mid[o] < stages$bottom[s] && occs$ma_mid[o] > stages$top[o]){
occs$new_bin[o] <- as.numeric(stages$stg[s])
}
}
}
warnings()
occs$ma_mid[o] < stages$bottom[s] && occs$ma_mid[o] > stages$top[o]
occs$ma_mid[o] < stages$bottom[s]
occs$ma_mid[o] > stages$top[o]
# Running based on PBDB ages
occs <- read.csv(file = "Data/NADINOS-occs-edit.csv") # Read in occurrences
colnames(occs)[38] <- "new_bin"
for(s in 1:nrow(stages)){
for(o in 1:nrow(occs)){
if(occs$ma_mid[o] < stages$bottom[s] && occs$ma_mid[o] > stages$top[s]){
occs$new_bin[o] <- as.numeric(stages$stg[s])
}
}
}
warnings()
View(occs)
for(s in 1:nrow(stages)){
for(o in 1:nrow(occs)){
if(occs$ma_mid[o] < stages$bottom[s] && occs$ma_mid[o] > stages$top[s]){
occs$new_bin[o] <- stages$stg[s]
}
}
}
View(Form_list)
View(occs)
occs$new_bin <- as.numeric(as.character(occs$new_bin))
for(s in 1:nrow(stages)){
for(o in 1:nrow(occs)){
if(occs$ma_mid[o] < stages$bottom[s] && occs$ma_mid[o] > stages$top[s]){
occs$new_bin[o] <- stages$stg[s]
}
}
}
View(occs)
# Div and SQS
bin_info <- binstat(occs, tax="occurrence.genus_name", bin="new_bin",
coll = 'collection_no')
library(divDyn)
# Div and SQS
bin_info <- binstat(occs, tax="occurrence.genus_name", bin="new_bin",
coll = 'collection_no')
View(bin_info)
SQS <- subsample(occs,iter=100, q=0.6,tax="occurrence.genus_name", bin="new_bin",
coll = 'collection_no', output="dist", type="sqs",
duplicates = TRUE, useFailed = TRUE)
library(divDyn)
#Set Up
occs <- read.csv(file = "Data/NADINOS-occs-edit.csv") # Read in occurrences
data(stages)
colnames(occs)[38] <- "new_bin"
occs$new_bin <- as.numeric(as.character(occs$new_bin))
# Binning
for(s in 1:nrow(stages)){
for(o in 1:nrow(occs)){
if(occs$ma_mid[o] < stages$bottom[s] && occs$ma_mid[o] > stages$top[s]){
occs$new_bin[o] <- stages$stg[s]
}
}
}
View(occs)
# Div and SQS
bin_info <- binstat(occs, tax="occurrence.genus_name", bin="new_bin",
coll = 'collection_no')
SQS <- subsample(occs,iter=100, q=0.6,tax="occurrence.genus_name", bin="new_bin",
coll = 'collection_no', output="dist", type="sqs",
duplicates = TRUE, useFailed = TRUE)
View(occs)
library(divDyn)
news(package=divDyn())
news(package="divDyn")
subsample(occs,iter=50, q=0.4, tax="occurrence.genus_name", bin="new_bin",
coll = 'collection_no', output="dist", type="sqs",
duplicates = TRUE, useFailed = TRUE)
SQS <- subsample(occs,iter=50, q=0.4, tax="occurrence.genus_name", bin="new_bin",
coll = 'collection_no', output="dist", type="sqs",
duplicates = TRUE, useFailed = TRUE)
View(SQS)
SQS$divSIB
test <- SQS$divSIB
View(test)
SIBSQS <- SQS$divSIB
SQS$divSIB[1:3,]
SQS$divSIB[70:81,]
SIBSQS <- SQS$divSIB[70:81,]
rowMeans(SIBSQS)
MeanSQS <- rowMeans(SIBSQS)
library(matrixStats)
rowSds(SIBSQS)
rowMeans2(SIBSQS)
SDSQS <- rowSds(SIBSQS)
