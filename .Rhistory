else {
if(n == length(form_bins)){
if(nrow(binlist) %% 2 == 0){
next
}
else{
rect(useful_bins[n], 0, useful_bins[n-1], 100, col = "#32323232", border = NA)
}
}
else{
rect(form_bins[n], 0, form_bins[n+1], 100-0.01, col = "#32323232", border = NA)
}
}
}
}
# Retrieves basic information about inputted formations, including mean age and range.
GetInfo <- function(formations){ # Require formation data
mean <- rowMeans(subset(formations, select = c(3, 4)), na.rm = TRUE)
range <- formations$max_age - formations$min_age
par(mfrow=c(2,1))
hist(mean, main = "Mean Age of Formations",xlab = "Mean Age (Ma)")
hist(range, main = "Range of Formations (Ma)", xlab = "Range (Ma)")
cat ('Mean range of formations: ', mean(range), fill = TRUE)
cat ('Median range of formations: ', median(range),fill = TRUE)
}
library(pbmcapply)
library(dplyr)
library(tidyverse)
library(divDyn)
library(rowr)
library(matrixStats)
library(beepr)
# Retrieves basic information about inputted formations, including mean age and range.
GetInfo <- function(formations){ # Require formation data
mean <- rowMeans(subset(formations, select = c(3, 4)), na.rm = TRUE)
range <- formations$max_age - formations$min_age
par(mfrow=c(2,1))
hist(mean, main = "Mean Age of Formations",xlab = "Mean Age (Ma)")
hist(range, main = "Range of Formations (Ma)", xlab = "Range (Ma)")
cat ('Mean range of formations: ', mean(range), fill = TRUE)
cat ('Median range of formations: ', median(range),fill = TRUE)
}
# Creates a scoring grid using info from all formations.
Scoring_Grid_1 <- function(formations, res=0.01) { # Requires formation information. Resolution of time lines is set automatically at 0.01, but can be adjusted.
max_age <- max(formations$max_age) #finds max age of all formations
min_age <- min(formations$min_age) #finds min age of all formations
allbins <- seq(min_age-1.0045, max_age+1.0045, res) # Makes 1ma bins in sequence based on max/min ages. 0.0045 added to ensure formation is never exactly equivalent to a bin.
score_grid <- matrix(data = NA, nrow = nrow(formations), ncol = length(allbins)) # makes a matrix for the scoring
# of each time line in terms of how good it is to be a bin boundary
colnames(score_grid) <- allbins # All time lines
rownames(score_grid) <- formations$Formation # All formations
counter <- 0
for(i in allbins) { # Go through each time line
counter <- sum(counter,1)
for (f in 1:nrow(formations)){ # go through each formation
if (i <= formations$max_age[f] && i >= formations$min_age[f]){ # if timeline is between max/min age of a formation (i.e. formation crosses that line)
a <- formations$max_age[f] - i # Work out how much of formation is older than timeline
b <- i - formations$min_age[f] # Work out how much of formation is younger than timeline
range <- formations$max_age[f] - formations$min_age[f] # Calculate range of formation
if (a > b){
score_grid[,counter][f] <- (a/range)*100 # Work out percentage that sits each side of line, reduce score by that amount.
}
else{
score_grid[,counter][f] <- (b/range)*100 # Work out percentage that sits each side of line, reduce score by that amount.
}
}
else {
score_grid[,counter][f] = 100 # Otherwise, just score it 100.
}
}
}
means <- colMeans(score_grid) # Work out mean score for each time bin
score_grid <- rbind(score_grid, means) # add to grid
score_grid <<- score_grid # Outputs score_grid for later use
allbins <<- allbins # Outputs bins for later use
}
# Create a scoring grid ignoring formations with length longer than mean formation length. In his way, long ranging formations don't
# bias the creation of bins, especially when they appear during the same time interval.
Scoring_Grid_2 <- function(formations, res=0.01) { # Requires formation information. Resolution of time lines is set automatically at 0.01, but can be adjusted.
max_age <- max(formations$max_age) #finds max age of all formations
min_age <- min(formations$min_age) #finds min age of all formations
allbins <- seq(min_age-1.0045, max_age+1.0045, res) # Makes 1ma bins in sequence based on max/min ages. 0.0001 added to ensure formation is never exactly equivalent to a bin.
score_grid <- matrix(data = NA, nrow = nrow(formations), ncol = length(allbins)) # makes a matrix for the scoring of each time line in terms of how good it is to be a bin boundary
colnames(score_grid) <- allbins # All time lines
rownames(score_grid) <- formations$Formation # All formations
counter <- 0
for(i in allbins) { # Go through each time line
counter <- sum(counter,1)
for (f in 1:nrow(formations)){ # go through each formation
if (formations$max_age[f] - formations$min_age[f] < # If formation range is less than the mean formation range
mean(formations$max_age - formations$min_age)) {
if (i <= formations$max_age[f] && i >= formations$min_age[f]){ # if timeline is between max/min age of a formation (i.e. formation crosses that line)
a <- formations$max_age[f] - i # Work out how much of formation is older than timeline
b <- i - formations$min_age[f] # Work out how much of formation is younger than timeline
range <- formations$max_age[f] - formations$min_age[f] # Calculate range of formation
if (a > b){
score_grid[,counter][f] <- (a/range)*100
}
else{
score_grid[,counter][f] <- (b/range)*100 # Work out percentage that sits each side of line, reduce score by that amount.
}
}
else {
score_grid[,counter][f] = 100 # Otherwise, just score it 100.
}
}
else { # If formation range is longer than mean formation range, skip (bin drawing isn't affected)
next
}
}
}
score_grid <- na.omit(score_grid) # Remove effect of formations longer than mean formation range
means <- colMeans(score_grid) # Work out mean score for each time bin
score_grid <- rbind(score_grid, means) # add to grid
score_grid <<- score_grid
allbins <<- allbins
}
# Generates plots through time with user inputted data and Formation_Bins, whilst providing traditional stage
# data for comparison. NOTE: xlim is specified to fit the chosen time window of this study - as such, this would
# have to be adjusted if other data were to be used.
plotMaker <- function(rel_data, binlist, ulabel){ # Takes relevant data for plotting, binlist(dataframe of bins) and a user generated level for y axis.
useful_bins <- c(binlist$bottom, binlist$top[nrow(binlist)]) # Converts binlist into format useful for plotting
tsplot(stages, boxes=c("short","system"), ylab = ulabel, # Creates plot using data from DivDyn package.
xlim=75:81,  ylim=c(0,(max(rel_data, na.rm = TRUE)+(max(rel_data, na.rm = TRUE)*0.1))),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75))
for(n in 1:length(useful_bins)){ # For each bin
if(((n %% 2) == 0) == TRUE) next # If the bin is even, skip it (allows for alternating colours of bins)
else {
if(n == length(useful_bins)){
if(nrow(binlist) %% 2 == 0){ # Skips colouring last bin if there are an even number of bins
next
}
else{
rect(useful_bins[n], 0, useful_bins[n-1],
(max(rel_data, na.rm = TRUE)+(max(rel_data, na.rm = TRUE)*0.1)),
col = "#32323232", border = NA)
}
}
else{
rect(useful_bins[n], 0, useful_bins[n+1],
(max(rel_data, na.rm = TRUE)+(max(rel_data, na.rm = TRUE)*0.1)),
col = "#32323232", border = NA)
}
}
}
lines(binlist$mid, rel_data, type = "o", pch = 21, col = "black", bg = "grey", lwd = 1) # Adds lines from relevant data provided.
}
newBins <- function(score_grid, formations, bin_limits, allbins, stages, smallsplitting = TRUE){ # Takes previously generated score grid, formations,
# allbins and stages from DivDyn package. Also require bin_limits, a user made vector of the following:
# 1) user chosen time window in which to look to draw bins. Advised to be set at 3 Ma.
# 2) Hard maximum age of bins
# 3) Hard minimum age of bins
score_grid<- as.data.frame(score_grid)
bin_size <- bin_limits[1]
max_age <- bin_limits[2]
min_age <- bin_limits[3]
form_bins <- c(min_age)
testbin <- seq(min_age, max_age, bin_size) # Creates broader bins for testing best point to draw a bin
# Drawing bins and giving form_bins (vector of bin boundaries)
for (i in 1:length((testbin)-1)){
seqs <- seq(testbin[i],testbin[i]+bin_size, 1) # Creates a sequence of ages to draw bins within
pasting <- c()
for (n in 1:bin_size){
pasting <- c(pasting, paste("^",seqs[n],"|", sep = "")) # Sets up expression to match to score_grid
}
testmatch2 <- paste(pasting, collapse = "")
testmatch2 <- substr(testmatch2, 1, nchar(testmatch2)-1)
a <- score_grid[grep(testmatch2, names(score_grid))] # Finds all scores within this time window
z <- apply(a,1,which.max) # Finds maximum bin score within this time window
form_bins[i+1] <- names(a)[z][nrow(a)] # Adds maximum bin score to a vector of bins
}
form_bins <- as.numeric(unique(form_bins)) # Finds all unique bins
if (smallsplitting = TRUE){
range <- (diff(form_bins) < 0.5) # Finds all bins which are under 0.5 Ma in length
range_checker <- c()
for (r in 1:length(range)){
if (range[r] == TRUE){ # If a bin is under 0.5 Ma in length
difference <- diff(c(form_bins[r], form_bins[r+1])) # Find the length of that bin
warning("Original bin ",  r, " removed due to small range: ~", signif(difference, digits = 3), " Ma. The difference in time has been added to the bins above and below.") # Generate warning about bin amalgamation
form_bins[r] <- form_bins[r]+(difference/2) # Adds half length of old bin to bin below
form_bins[r+1] <- form_bins[r+1]-(difference/2) # Adds half length of old bin to bin above
range_checker <- c(range_checker, r) # Records which bin was too small
}
}
if(length(range_checker) > 0){ # If there have been amalgamated bins
form_bins <- form_bins[-range_checker] # Remove old amalgamated bins
}
}
form_bins <<- form_bins
# Creating binlist (data.frame of bins and appropriate age info)
prefix <- "FB."
suffix <- seq(1:(length(form_bins)-1))
my_names <- paste(prefix, suffix, sep = "")
binlist <- data.frame(bin = my_names, # Combines bin data to make dataframe of minimum, maximum and mid point of each new bin
bottom = as.numeric(form_bins[1:(length(form_bins)-1)]),
top = as.numeric(form_bins[2:(length(form_bins))]))
binlist$mid <- (binlist$bottom + binlist$top) / 2
binlist <<- binlist
#Plotting new bins
par(mar = c(4.1, 4.1, 1, 2.1))
tsplot(stages, boxes=c("short","system"), # Generates plot using DivDyn package
xlim=75:81,  ylim=c(min(colMeans(score_grid), na.rm = TRUE), 100),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Bin Splitting Score")
lines(allbins, colMeans(score_grid)) # draws bin splitting score on plot
for(n in 1:length(form_bins)){ # draws new bins as coloured boxes for comparison to traditional bins
if(((n %% 2) == 0) == TRUE) next
else {
if(n == length(form_bins)){
if(nrow(binlist) %% 2 == 0){
next
}
else{
rect(useful_bins[n], 0, useful_bins[n-1], 100, col = "#32323232", border = NA)
}
}
else{
rect(form_bins[n], 0, form_bins[n+1], 100-0.01, col = "#32323232", border = NA)
}
}
}
}
newBins <- function(score_grid, formations, bin_limits, allbins, stages, smallsplitting = TRUE){ # Takes previously generated score grid, formations,
# allbins and stages from DivDyn package. Also require bin_limits, a user made vector of the following:
# 1) user chosen time window in which to look to draw bins. Advised to be set at 3 Ma.
# 2) Hard maximum age of bins
# 3) Hard minimum age of bins
score_grid<- as.data.frame(score_grid)
bin_size <- bin_limits[1]
max_age <- bin_limits[2]
min_age <- bin_limits[3]
form_bins <- c(min_age)
testbin <- seq(min_age, max_age, bin_size) # Creates broader bins for testing best point to draw a bin
# Drawing bins and giving form_bins (vector of bin boundaries)
for (i in 1:length((testbin)-1)){
seqs <- seq(testbin[i],testbin[i]+bin_size, 1) # Creates a sequence of ages to draw bins within
pasting <- c()
for (n in 1:bin_size){
pasting <- c(pasting, paste("^",seqs[n],"|", sep = "")) # Sets up expression to match to score_grid
}
testmatch2 <- paste(pasting, collapse = "")
testmatch2 <- substr(testmatch2, 1, nchar(testmatch2)-1)
a <- score_grid[grep(testmatch2, names(score_grid))] # Finds all scores within this time window
z <- apply(a,1,which.max) # Finds maximum bin score within this time window
form_bins[i+1] <- names(a)[z][nrow(a)] # Adds maximum bin score to a vector of bins
}
form_bins <- as.numeric(unique(form_bins)) # Finds all unique bins
if (smallsplitting == TRUE){
range <- (diff(form_bins) < 0.5) # Finds all bins which are under 0.5 Ma in length
range_checker <- c()
for (r in 1:length(range)){
if (range[r] == TRUE){ # If a bin is under 0.5 Ma in length
difference <- diff(c(form_bins[r], form_bins[r+1])) # Find the length of that bin
warning("Original bin ",  r, " removed due to small range: ~", signif(difference, digits = 3), " Ma. The difference in time has been added to the bins above and below.") # Generate warning about bin amalgamation
form_bins[r] <- form_bins[r]+(difference/2) # Adds half length of old bin to bin below
form_bins[r+1] <- form_bins[r+1]-(difference/2) # Adds half length of old bin to bin above
range_checker <- c(range_checker, r) # Records which bin was too small
}
}
if(length(range_checker) > 0){ # If there have been amalgamated bins
form_bins <- form_bins[-range_checker] # Remove old amalgamated bins
}
}
form_bins <<- form_bins
# Creating binlist (data.frame of bins and appropriate age info)
prefix <- "FB."
suffix <- seq(1:(length(form_bins)-1))
my_names <- paste(prefix, suffix, sep = "")
binlist <- data.frame(bin = my_names, # Combines bin data to make dataframe of minimum, maximum and mid point of each new bin
bottom = as.numeric(form_bins[1:(length(form_bins)-1)]),
top = as.numeric(form_bins[2:(length(form_bins))]))
binlist$mid <- (binlist$bottom + binlist$top) / 2
binlist <<- binlist
#Plotting new bins
par(mar = c(4.1, 4.1, 1, 2.1))
tsplot(stages, boxes=c("short","system"), # Generates plot using DivDyn package
xlim=75:81,  ylim=c(min(colMeans(score_grid), na.rm = TRUE), 100),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Bin Splitting Score")
lines(allbins, colMeans(score_grid)) # draws bin splitting score on plot
for(n in 1:length(form_bins)){ # draws new bins as coloured boxes for comparison to traditional bins
if(((n %% 2) == 0) == TRUE) next
else {
if(n == length(form_bins)){
if(nrow(binlist) %% 2 == 0){
next
}
else{
rect(useful_bins[n], 0, useful_bins[n-1], 100, col = "#32323232", border = NA)
}
}
else{
rect(form_bins[n], 0, form_bins[n+1], 100-0.01, col = "#32323232", border = NA)
}
}
}
}
# Data input
formations <- read.csv (file = "Data/Formations_test2.csv")  #Read in formations
occs <- read.csv(file = "Data/NADINOS-occs-edit.csv") # Read in occurrences
# Standard Bin setup
data(stages)
# Make parts Numeric
formations$max_age <- as.numeric(as.character(formations$max_age)) # Make Numeric
formations$min_age <- as.numeric(as.character(formations$min_age)) # Make Numeric
# Select appropriate formations and order
formations <- formations[which(formations$Location=='WI'),] # Only formations from Western Interior
myformations <- sort(as.vector(formations$Formation)) # Organise
# Select appropriate occurrences
testoccs <- occs[occs$formation %in% myformations,] # Only include occurrences from formation list
testoccs <- droplevels.data.frame(testoccs) # Remove old levels
# Reorganise formations
formations <- formations[order(formations$Formation),] # Reorganise formations
# Create Formation/occurrences list
Form_list <- split(testoccs, testoccs$formation) # Makes inputted occ data into lists from Formations
formations$forbinning <- 1:nrow(formations) # Number formations for easy plotting later
#===== Set up =====
Quorum <- c(0.4, 0.6, 0.8)
bin_limits <- c(3, max(formations$max_age), 66) # Set user defined bin size
Scoring_Grid_2(formations)
newBins(score_grid, formations, bin_limits, allbins, stages) # Uses the scoring grid to generate new bins.
newBins(score_grid, formations, bin_limits, allbins, stages, smallsplitting = FALSE) # Uses the scoring grid to generate new bins.
newBins(score_grid, formations, bin_limits, allbins, stages, smallsplitting = TRUE) # Uses the scoring grid to generate new bins.
newBins <- function(score_grid, formations, bin_limits, allbins, stages, smallsplitting = TRUE){ # Takes previously generated score grid, formations,
# allbins and stages from DivDyn package. Also require bin_limits, a user made vector of the following:
# 1) user chosen time window in which to look to draw bins. Advised to be set at 3 Ma.
# 2) Hard maximum age of bins
# 3) Hard minimum age of bins
score_grid<- as.data.frame(score_grid)
bin_size <- bin_limits[1]
max_age <- bin_limits[2]
min_age <- bin_limits[3]
form_bins <- c(min_age)
testbin <- seq(min_age, max_age, bin_size) # Creates broader bins for testing best point to draw a bin
# Drawing bins and giving form_bins (vector of bin boundaries)
for (i in 1:length((testbin)-1)){
seqs <- seq(testbin[i],testbin[i]+bin_size, 1) # Creates a sequence of ages to draw bins within
pasting <- c()
for (n in 1:bin_size){
pasting <- c(pasting, paste("^",seqs[n],"|", sep = "")) # Sets up expression to match to score_grid
}
testmatch2 <- paste(pasting, collapse = "")
testmatch2 <- substr(testmatch2, 1, nchar(testmatch2)-1)
a <- score_grid[grep(testmatch2, names(score_grid))] # Finds all scores within this time window
z <- apply(a,1,which.max) # Finds maximum bin score within this time window
form_bins[i+1] <- names(a)[z][nrow(a)] # Adds maximum bin score to a vector of bins
}
form_bins <- as.numeric(unique(form_bins)) # Finds all unique bins
if (smallsplitting == TRUE){ # If small bin splitting is turned on (is on automatically):
range <- (diff(form_bins) < 0.5) # Finds all bins which are under 0.5 Ma in length
range_checker <- c()
for (r in 1:length(range)){
if (range[r] == TRUE){ # If a bin is under 0.5 Ma in length
difference <- diff(c(form_bins[r], form_bins[r+1])) # Find the length of that bin
warning("Original bin ",  r, " removed due to small range: ~", signif(difference, digits = 3), " Ma. The difference in time has been added to the bins above and below.") # Generate warning about bin amalgamation
form_bins[r] <- form_bins[r]+(difference/2) # Adds half length of old bin to bin below
form_bins[r+1] <- form_bins[r+1]-(difference/2) # Adds half length of old bin to bin above
range_checker <- c(range_checker, r) # Records which bin was too small
}
}
if(length(range_checker) > 0){ # If there have been amalgamated bins
form_bins <- form_bins[-range_checker] # Remove old amalgamated bins
}
}
if (smallsplitting == FALSE){
warning("Smallsplitting is turned off. Bins may be too short to record occurrences. You are advised to check bins before running further analyses.") # Generate warning if small bin splitting is turned off.
}
form_bins <<- form_bins
# Creating binlist (data.frame of bins and appropriate age info)
prefix <- "FB."
suffix <- seq(1:(length(form_bins)-1))
my_names <- paste(prefix, suffix, sep = "")
binlist <- data.frame(bin = my_names, # Combines bin data to make dataframe of minimum, maximum and mid point of each new bin
bottom = as.numeric(form_bins[1:(length(form_bins)-1)]),
top = as.numeric(form_bins[2:(length(form_bins))]))
binlist$mid <- (binlist$bottom + binlist$top) / 2
binlist <<- binlist
#Plotting new bins
par(mar = c(4.1, 4.1, 1, 2.1))
tsplot(stages, boxes=c("short","system"), # Generates plot using DivDyn package
xlim=75:81,  ylim=c(min(colMeans(score_grid), na.rm = TRUE), 100),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Bin Splitting Score")
lines(allbins, colMeans(score_grid)) # draws bin splitting score on plot
for(n in 1:length(form_bins)){ # draws new bins as coloured boxes for comparison to traditional bins
if(((n %% 2) == 0) == TRUE) next
else {
if(n == length(form_bins)){
if(nrow(binlist) %% 2 == 0){
next
}
else{
rect(useful_bins[n], 0, useful_bins[n-1], 100, col = "#32323232", border = NA)
}
}
else{
rect(form_bins[n], 0, form_bins[n+1], 100-0.01, col = "#32323232", border = NA)
}
}
}
}
newBins(score_grid, formations, bin_limits, allbins, stages, smallsplitting = FALSE) # Uses the scoring grid to generate new bins.
newBins <- function(score_grid, formations, bin_limits, allbins, stages, smallamalg = TRUE){ # Takes previously generated score grid, formations,
# allbins and stages from DivDyn package. Also require bin_limits, a user made vector of the following:
# 1) user chosen time window in which to look to draw bins. Advised to be set at 3 Ma.
# 2) Hard maximum age of bins
# 3) Hard minimum age of bins
score_grid<- as.data.frame(score_grid)
bin_size <- bin_limits[1]
max_age <- bin_limits[2]
min_age <- bin_limits[3]
form_bins <- c(min_age)
testbin <- seq(min_age, max_age, bin_size) # Creates broader bins for testing best point to draw a bin
# Drawing bins and giving form_bins (vector of bin boundaries)
for (i in 1:length((testbin)-1)){
seqs <- seq(testbin[i],testbin[i]+bin_size, 1) # Creates a sequence of ages to draw bins within
pasting <- c()
for (n in 1:bin_size){
pasting <- c(pasting, paste("^",seqs[n],"|", sep = "")) # Sets up expression to match to score_grid
}
testmatch2 <- paste(pasting, collapse = "")
testmatch2 <- substr(testmatch2, 1, nchar(testmatch2)-1)
a <- score_grid[grep(testmatch2, names(score_grid))] # Finds all scores within this time window
z <- apply(a,1,which.max) # Finds maximum bin score within this time window
form_bins[i+1] <- names(a)[z][nrow(a)] # Adds maximum bin score to a vector of bins
}
form_bins <- as.numeric(unique(form_bins)) # Finds all unique bins
if (smallamalg == TRUE){ # If small bin amalgamation is turned on (is on automatically):
range <- (diff(form_bins) < 0.5) # Finds all bins which are under 0.5 Ma in length
range_checker <- c()
for (r in 1:length(range)){
if (range[r] == TRUE){ # If a bin is under 0.5 Ma in length
difference <- diff(c(form_bins[r], form_bins[r+1])) # Find the length of that bin
warning("Original bin ",  r, " removed due to small range: ~", signif(difference, digits = 3), " Ma. The difference in time has been added to the bins above and below.") # Generate warning about bin amalgamation
form_bins[r] <- form_bins[r]+(difference/2) # Adds half length of old bin to bin below
form_bins[r+1] <- form_bins[r+1]-(difference/2) # Adds half length of old bin to bin above
range_checker <- c(range_checker, r) # Records which bin was too small
}
}
if(length(range_checker) > 0){ # If there have been amalgamated bins
form_bins <- form_bins[-range_checker] # Remove old amalgamated bins
}
}
if (smallamalg == FALSE){
warning("Small bin amalgamation is turned off. Bins may be too short to record occurrences. You are advised to check bins before running further analyses.") # Generate warning if small bin amalgamation is turned off.
}
form_bins <<- form_bins
# Creating binlist (data.frame of bins and appropriate age info)
prefix <- "FB."
suffix <- seq(1:(length(form_bins)-1))
my_names <- paste(prefix, suffix, sep = "")
binlist <- data.frame(bin = my_names, # Combines bin data to make dataframe of minimum, maximum and mid point of each new bin
bottom = as.numeric(form_bins[1:(length(form_bins)-1)]),
top = as.numeric(form_bins[2:(length(form_bins))]))
binlist$mid <- (binlist$bottom + binlist$top) / 2
binlist <<- binlist
#Plotting new bins
par(mar = c(4.1, 4.1, 1, 2.1))
tsplot(stages, boxes=c("short","system"), # Generates plot using DivDyn package
xlim=75:81,  ylim=c(min(colMeans(score_grid), na.rm = TRUE), 100),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Bin Splitting Score")
lines(allbins, colMeans(score_grid)) # draws bin splitting score on plot
for(n in 1:length(form_bins)){ # draws new bins as coloured boxes for comparison to traditional bins
if(((n %% 2) == 0) == TRUE) next
else {
if(n == length(form_bins)){
if(nrow(binlist) %% 2 == 0){
next
}
else{
rect(useful_bins[n], 0, useful_bins[n-1], 100, col = "#32323232", border = NA)
}
}
else{
rect(form_bins[n], 0, form_bins[n+1], 100-0.01, col = "#32323232", border = NA)
}
}
}
}
newBins(score_grid, formations, bin_limits, allbins, stages, smallamalg = FALSE) # Uses the scoring grid to generate new bins.
FormationGraph(formations, form_bins, stages) # Visualises the range of formations in comparison with stage level bins and new bins.
# Shows what formations look like through time in comparison to Stages and new Bins.
FormationGraph <- function(formations, form_bins, stages){ # Requires formations, form_bins from newBins function and stages from DivDyn package
fp <- data.frame("x1" = formations$min_age, "y1" = formations$forbinning, 'x2' = formations$max_age, 'y2' = formations$forbinning)
par(mar = c(4.1, 4.1, 1, 2.1))
tsplot(stages, boxes=c("short","system"), # Generates plot using Divdyn package
xlim=75:81,  ylim=range(fp$y1, fp$y2),
shading=NULL, boxes.col=c("col","systemCol"), labels.args=list(cex=0.75),
ylab = "Formations by Number")
segments(fp$x1, fp$y1, fp$x2, fp$y2, lwd = 2) # Plots formations as lines showing their duration
for(n in 1:length(form_bins)){ # draws new bins as coloured boxes for comparison to traditional bins
if(((n %% 2) == 0) == TRUE) next
else {
if(n == length(form_bins)){
if(nrow(binlist) %% 2 == 0){
next
}
else{
rect(useful_bins[n], 0, useful_bins[n-1],
max(fp$y2, na.rm = TRUE), col = "#32323232", border = NA)
}
}
else{
rect(form_bins[n], 0, form_bins[n+1],
max(fp$y2, na.rm = TRUE), col = "#32323232", border = NA)
}
}
}
}
FormationGraph(formations, form_bins, stages) # Visualises the range of formations in comparison with stage level bins and new bins.
View(occs)
